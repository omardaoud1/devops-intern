name: terraform

on:
  push:
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  workflow_dispatch:

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.8.5

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Delete broken AKS cluster if managed RG is missing
        run: |
          # Check if managed resource group exists
          if ! az group show --name "MC_${RESOURCE_GROUP_NAME}_${AKS_CLUSTER_NAME}_eastus" --query "id" -o tsv 2>/dev/null; then
            echo "Managed resource group missing - deleting broken AKS cluster"
            az aks delete --name ${{ vars.AKS_CLUSTER_NAME }} --resource-group ${{ vars.RESOURCE_GROUP_NAME }} --yes
          else
            echo "Managed resource group exists - AKS cluster is healthy"
          fi
        env:
          RESOURCE_GROUP_NAME: ${{ vars.RESOURCE_GROUP_NAME }}
          AKS_CLUSTER_NAME: ${{ vars.AKS_CLUSTER_NAME }}

      - name: Remove AKS from Terraform state
        run: |
          # Check if AKS exists in Terraform state
          if terraform state list | grep azurerm_kubernetes_cluster.aks; then
            echo "Removing AKS from Terraform state"
            terraform state rm azurerm_kubernetes_cluster.aks
          fi

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      # --- COMPREHENSIVE IMPORT STEP ---
      - name: Import Existing Azure Resources
        run: |
          # Import Resource Group (if needed)
          if az group show --name "${{ vars.RESOURCE_GROUP_NAME }}" --query "id" -o tsv 2>/dev/null; then
            echo "Importing Resource Group..."
            terraform import azurerm_resource_group.doctor_rg /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ vars.RESOURCE_GROUP_NAME }} || true
          fi

          # Import Virtual Network (if needed)
          if az network vnet show --name "${{ vars.VNET_NAME }}" --resource-group "${{ vars.RESOURCE_GROUP_NAME }}" --query "id" -o tsv 2>/dev/null; then
            echo "Importing Virtual Network..."
            terraform import azurerm_virtual_network.doctor_vnet /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ vars.RESOURCE_GROUP_NAME }}/providers/Microsoft.Network/virtualNetworks/${{ vars.VNET_NAME }} || true
          fi

          # Import Subnet (if needed)
          if az network vnet subnet show --name "${{ vars.SUBNET_NAME }}" --vnet-name "${{ vars.VNET_NAME }}" --resource-group "${{ vars.RESOURCE_GROUP_NAME }}" --query "id" -o tsv 2>/dev/null; then
            echo "Importing Subnet..."
            terraform import azurerm_subnet.doctor_subnet /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ vars.RESOURCE_GROUP_NAME }}/providers/Microsoft.Network/virtualNetworks/${{ vars.VNET_NAME }}/subnets/${{ vars.SUBNET_NAME }} || true
          fi

          # Import AKS Cluster (if needed)
          if az aks show --name "${{ vars.AKS_CLUSTER_NAME }}" --resource-group "${{ vars.RESOURCE_GROUP_NAME }}" --query "id" -o tsv 2>/dev/null; then
            echo "Importing AKS Cluster..."
            terraform import azurerm_kubernetes_cluster.aks /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ vars.RESOURCE_GROUP_NAME }}/providers/Microsoft.ContainerService/managedClusters/${{ vars.AKS_CLUSTER_NAME }} || true
          fi
        continue-on-error: true

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

      - name: Output Critical Values
        run: |
          echo "ACR Name: $(terraform output -raw acr_name)"
          echo "AKS Name: $(terraform output -raw aks_name)"
          echo "Resource Group: $(terraform output -raw resource_group_name)"
